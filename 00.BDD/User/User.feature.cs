// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD.SPECS.User
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserManagementFeature : object, Xunit.IClassFixture<UserManagementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "User.feature"
#line hidden
        
        public UserManagementFeature(UserManagementFeature.FixtureData fixtureData, BDD_SPECS_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User", "User Management", "    In order to manage user efficiently\r\n    as an Admin \r\n    I want to be able " +
                    "to the list of Users and add a new one to the list", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="viewing UserIndex page")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "viewing UserIndex page")]
        public virtual void ViewingUserIndexPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("viewing UserIndex page", null, tagsOfScenario, argumentsOfScenario);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
        testRunner.Given("I am in side menu of website admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
        testRunner.And("I am in User panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
        testRunner.When("I click on Users management button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then("I should be redirected into UserIndex page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
        testRunner.And("I should see a table of Users and their corresponding fields of information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
        testRunner.And("I should see a AddANewUser button on the left top of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a new user")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "Adding a new user")]
        public virtual void AddingANewUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a new user", null, tagsOfScenario, argumentsOfScenario);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
        testRunner.Given("I am in AddANewUser page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
        testRunner.When("I enter Name as \"mehdi\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
        testRunner.And("I enter LName as \"vahabisani\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
        testRunner.And("I enter RoleTitle as \"Blog Authors\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
        testRunner.And("I Enter Email as \"mehdivbs97@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
        testRunner.And("I Enter Password as \"810994117m\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
        testRunner.And("I Enter PasswordRep as \"810994117m\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
        testRunner.And("I Enter MobileNum as \"09157695921\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.And("I click on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.Then("I shoud be redircted into UserIndex page in Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
        testRunner.And("I Should see the \"mehdivbs97@gmail.com\" on top of the List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Viewing UserIndex page from AddANewUser page")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "Viewing UserIndex page from AddANewUser page")]
        public virtual void ViewingUserIndexPageFromAddANewUserPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Viewing UserIndex page from AddANewUser page", null, tagsOfScenario, argumentsOfScenario);
#line 27
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
        testRunner.Given("I am in AddANewUser page in admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
        testRunner.When("I click on View UsersIndex button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
        testRunner.Then("I should be redirected into UserIndex page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
        testRunner.And("I should see a table of Users and their corresponding fields of information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
        testRunner.And("I should see AddANewUser button on the left top of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Null UserData entry")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "Null UserData entry")]
        [Xunit.InlineDataAttribute("null", "null", "null", "null", "null", "null", "null", "name can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "null", "null", "null", "null", "null", "null", "Lastname can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "null", "null", "null", "null", "null", "role type can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "null", "null", "null", "null", "email can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "null", "null", "null", "password can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "12345MasAs", "null", "null", "password repeat can not be null", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "12345MasAs", "12345MasAs", "null", "mobile number can not be null", new string[0])]
        public virtual void NullUserDataEntry(string name, string lName, string roleTitle, string email, string password, string passwordRep, string mobileNum, string errorDesc, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("LName", lName);
            argumentsOfScenario.Add("RoleTitle", roleTitle);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("PasswordRep", passwordRep);
            argumentsOfScenario.Add("MobileNum", mobileNum);
            argumentsOfScenario.Add("ErrorDesc", errorDesc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null UserData entry", null, tagsOfScenario, argumentsOfScenario);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
        testRunner.Given("I am in AddANewUser page in Admin Panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
        testRunner.When(string.Format("I Enter {0}, {1}, {2}, <Username>, {3}, {4}, {5}, {6}", name, lName, roleTitle, email, password, passwordRep, mobileNum), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
        testRunner.And("I click on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
        testRunner.Then(string.Format("I should see {0} correctly", errorDesc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="WhiteSpace UserData entry")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "WhiteSpace UserData entry")]
        [Xunit.InlineDataAttribute("whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "name can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "Lastname can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "role type can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "username can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "whiteSpace", "whiteSpace", "whiteSpace", "whiteSpace", "email can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "whiteSpace", "whiteSpace", "whiteSpace", "password can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "12345MasAs", "whiteSpace", "whiteSpace", "password repeat can not be empty", new string[0])]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAs@gmail.com", "12345MasAs", "12345MasAs", "whiteSpace", "mobile number can not be empty", new string[0])]
        public virtual void WhiteSpaceUserDataEntry(string name, string lName, string roleTitle, string email, string password, string passwordRep, string mobileNum, string errorDesc, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("LName", lName);
            argumentsOfScenario.Add("RoleTitle", roleTitle);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("PasswordRep", passwordRep);
            argumentsOfScenario.Add("MobileNum", mobileNum);
            argumentsOfScenario.Add("ErrorDesc", errorDesc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WhiteSpace UserData entry", null, tagsOfScenario, argumentsOfScenario);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
        testRunner.Given("I am in AddANewUser page in Admin Panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
        testRunner.When(string.Format("I Enter {0}, {1}, {2}, <Username>, {3}, {4}, {5}, {6}", name, lName, roleTitle, email, password, passwordRep, mobileNum), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
        testRunner.And("I click on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
        testRunner.Then(string.Format("I should see {0} correctly", errorDesc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Duplicated Value for email")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "Duplicated Value for email")]
        [Xunit.InlineDataAttribute("mehdi", "vahabisani", "Blog Authors", "MasAs@gmail.com", "123MehdiVBS", "123MehdiVBS", "09157695921", "Email Address has been already taken", new string[0])]
        public virtual void DuplicatedValueForEmail(string name, string lName, string roleTitle, string email, string password, string passwordRep, string mobileNum, string errorDesc, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("LName", lName);
            argumentsOfScenario.Add("RoleTitle", roleTitle);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("PasswordRep", passwordRep);
            argumentsOfScenario.Add("MobileNum", mobileNum);
            argumentsOfScenario.Add("ErrorDesc", errorDesc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicated Value for email", null, tagsOfScenario, argumentsOfScenario);
#line 65
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "LName",
                            "RoleTitle",
                            "Email",
                            "Password",
                            "PasswordRep",
                            "MobileNum"});
                table2.AddRow(new string[] {
                            "Masoud",
                            "Asgarian",
                            "Blog Authors",
                            "MasAs@gmail.com",
                            "12345MasAs",
                            "MasAs12345",
                            "09157695921"});
#line 66
        testRunner.Given("the following user already exists:", ((string)(null)), table2, "Given ");
#line hidden
#line 69
        testRunner.And("I am in AddANewUser page in Admin Panel in order to add a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
        testRunner.When(string.Format("I Enter {0}, {1}, {2}, a Duplicated {3}, {4}, {5}, {6}", name, lName, roleTitle, email, password, passwordRep, mobileNum), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.And("I click on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
        testRunner.Then(string.Format("I should see {0} correctly", errorDesc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="non-identical pass repeat")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management")]
        [Xunit.TraitAttribute("Description", "non-identical pass repeat")]
        [Xunit.InlineDataAttribute("Masoud", "Asgarian", "Blog Authors", "MasAsgarian", "MasAs@gmail.com", "12345MasAs", "MasAs12345", "09157695921", "password and PasswordRep do not match", new string[0])]
        public virtual void Non_IdenticalPassRepeat(string name, string lName, string roleTitle, string username, string email, string password, string passwordRep, string mobileNum, string errorDesc, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("LName", lName);
            argumentsOfScenario.Add("RoleTitle", roleTitle);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("PasswordRep", passwordRep);
            argumentsOfScenario.Add("MobileNum", mobileNum);
            argumentsOfScenario.Add("ErrorDesc", errorDesc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("non-identical pass repeat", null, tagsOfScenario, argumentsOfScenario);
#line 77
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
        testRunner.Given("I am AddANewUser page in Admin Panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
        testRunner.When(string.Format("I Enter {0}, {1}, {2}, {3}, {4}, {5}, a non-identical {6}, {7}", name, lName, roleTitle, username, email, password, passwordRep, mobileNum), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
        testRunner.And("I click on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
        testRunner.Then(string.Format("I should see {0} correctly", errorDesc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UserManagementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UserManagementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
